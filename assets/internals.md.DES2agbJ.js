import{_ as t,c as a,o,ag as n}from"./chunks/framework.DWxUEc8X.js";const m=JSON.parse('{"title":"Internals","description":"","frontmatter":{},"headers":[],"relativePath":"internals.md","filePath":"internals.md"}'),i={name:"internals.md"};function r(s,e,l,c,d,h){return o(),a("div",null,[...e[0]||(e[0]=[n('<h1 id="internals" tabindex="-1">Internals <a class="header-anchor" href="#internals" aria-label="Permalink to &quot;Internals&quot;">​</a></h1><p>This page explains the key internal modules and algorithms used inside Ripple Router.</p><p>It&#39;s useful if you want to contribute or understand performance characteristics.</p><p>The whole codebase of the router can be seen at its <a href="https://github.com/WebEferen/ripple-router" target="_blank" rel="noreferrer">GitHub repo</a></p><h2 id="matching-algorithm" tabindex="-1">Matching algorithm <a class="header-anchor" href="#matching-algorithm" aria-label="Permalink to &quot;Matching algorithm&quot;">​</a></h2><p>Route matching is implemented in <code>src/utils/matchPath.ts</code>. The matcher does the following:</p><ol><li>Split the candidate path into fragments by <code>/</code>.</li><li>Compare fragments to the route pattern; dynamic segments start with <code>:</code> and capture their value.</li><li>Support <code>*</code> catch-all patterns by consuming the rest of the path.</li></ol><p>The matcher returns a small object with <code>{ matched: boolean, params: Record }</code>.</p><h2 id="navigation-and-history" tabindex="-1">Navigation and history <a class="header-anchor" href="#navigation-and-history" aria-label="Permalink to &quot;Navigation and history&quot;">​</a></h2><ul><li>Navigation functions live in <code>src/utils/navigateTo.ts</code> and wrap <code>history.pushState</code>/<code>replaceState</code>.</li><li>The Router listens to <code>popstate</code> events and re-evaluates route matches.</li></ul><h2 id="contexts" tabindex="-1">Contexts <a class="header-anchor" href="#contexts" aria-label="Permalink to &quot;Contexts&quot;">​</a></h2><p>Routing state (current path, match data) is stored in a context provider located at <code>src/contexts/RoutesContext.ripple</code>.</p><p>Route components consume this context to determine whether they should render and which params to pass to their elements.</p><h2 id="link-implementation-details" tabindex="-1">Link implementation details <a class="header-anchor" href="#link-implementation-details" aria-label="Permalink to &quot;Link implementation details&quot;">​</a></h2><p><code>src/components/Link.ripple</code> prevents full page reloads using an <code>onClick</code> handler, then calls <code>navigateTo()</code> to update history.</p><p>It also falls back to normal anchor behavior if the user opens the link in a new tab or uses modifier keys.</p><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h2><p>Unit tests should focus on <code>matchPath.ts</code> and <code>navigateTo.ts</code>. For components, write renderer-level tests that assert which element is rendered for a given path.</p>',18)])])}const u=t(i,[["render",r]]);export{m as __pageData,u as default};
