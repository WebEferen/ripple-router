import{_ as s,c as a,o as i,ag as t}from"./chunks/framework.DWxUEc8X.js";const m=JSON.parse('{"title":"FAQ","description":"","frontmatter":{},"headers":[],"relativePath":"faq.md","filePath":"faq.md"}'),r={name:"faq.md"};function n(p,e,o,d,l,c){return i(),a("div",null,[...e[0]||(e[0]=[t(`<h1 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h1><p>Commonly asked questions about Ripple Router. Click a question to expand its answer.</p><details><summary>Does Ripple Router support server-side rendering (SSR)?</summary><p>Ripple Router is primarily a client-side router. You can render initial HTML on the server but you must hydrate on the client and sync the initial location. There is no built-in SSR-specific API; integration depends on your app framework and build setup.</p></details><details><summary>How do I handle query parameters?</summary><p>Route elements receive <code>searchParams</code> (if provided). For building URLs, use <code>navigateTo(path, { searchParams })</code>.</p><p>Example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigateTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/search&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    searchParams: { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        q: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ripple&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>becomes: <code>/search?q=ripple</code></p></details><details><summary>How are dynamic segments exposed?</summary><p>Dynamic segments (e.g. <code>/users/:id</code>) are available on <code>params</code> passed as props to the routed component: <code>params.id</code>.</p></details><details><summary>Can I use anchor tags for SEO?</summary><p>Yes — <code>Link</code> renders semantic anchors. For pre-rendered or server-rendered pages, make sure anchors contain proper <code>href</code> values so crawlers can follow links.</p></details><details><summary>How do I debug route matching?</summary><p>Inspect <code>src/utils/matchPath.ts</code>. Add console logs or unit tests asserting expected params for sample paths. Writing small unit tests for edge cases (wildcards, trailing slashes) is recommended.</p></details>`,7)])])}const u=s(r,[["render",n]]);export{m as __pageData,u as default};
