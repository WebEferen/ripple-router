import { effect, track } from 'ripple';
import { NotFound } from '../components/NotFound.ripple';
import { RoutesContext } from '../contexts/RoutesContext.ripple';
import { formatPath } from '../utils/formatPath';
import { matchPath } from '../utils/matchPath';
import { getParams } from '../utils/getParams';
import { SYMBOLS } from '../constants';

export component Renderer() {
    const routes = RoutesContext.get();
    let routeMatched = track(() => false);

    // Get location pathname
    let path = track(() => window.location.pathname);
    let locationPathFragments = track(() => formatPath(@path));
    let element = track(null);
    let params = track(null);

    effect(() => {
        function listenToNavigation() {
            @path = window.location.pathname;
        }

        window.addEventListener('popstate', listenToNavigation);
        return () => window.removeEventListener('popstate', listenToNavigation);
    })

    effect(() => {
        for (const route of routes.keys()) {
            const routePathFragments = formatPath(route);

            if (matchPath(routePathFragments, @locationPathFragments)) {
                @routeMatched = true;
                @element = routes.get(route);
                @params = getParams(routePathFragments, @locationPathFragments);
            }
        }
    })

    if (@routeMatched) {
        <@element params={@params} />
    }
    
    if (!@routeMatched) {
        const CustomNotFound = routes.get(SYMBOLS.CATCH_ALL);

        if (CustomNotFound) {
            <CustomNotFound />
        } else {
            <NotFound />
        }
    }
}