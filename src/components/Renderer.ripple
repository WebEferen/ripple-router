import { effect } from 'ripple';
import { NotFound } from '../components/NotFound.ripple';
import { RoutesContext } from '../contexts/RoutesContext.ripple';
import { formatPath } from '../utils/formatPath';
import { matchPath } from '../utils/matchPath';
import { getParams } from '../utils/getParams';
import { SYMBOLS } from '../constants';

export component Renderer() {
    const routes = RoutesContext.get();
    let $routeMatched = false;

    // Get location pathname
    let $path = window.location.pathname;
    const $locationPathFragments = formatPath($path);

    effect(() => {
        function listenToNavigation() {
            $path = window.location.pathname;
        }

        window.addEventListener('popstate', listenToNavigation);
        return () => window.removeEventListener('popstate', listenToNavigation);
    })

    // Match path
    for (const route of routes.keys()) {
        const routePathFragments = formatPath(route);
        const routeParams = getParams(routePathFragments, $locationPathFragments);

        const $element = routes.get(route);

        if (matchPath(routePathFragments, $locationPathFragments)) {
            <$element params={routeParams} />
            $routeMatched = true;
        }
    }

    if (!$routeMatched) {
        const CustomNotFound = routes.get(SYMBOLS.CATCH_ALL);

        if (CustomNotFound) {
            <CustomNotFound />
        } else {
            <NotFound />
        }
    }
}